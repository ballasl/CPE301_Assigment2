
CPE301_Assignment2_Part3C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e0  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000654  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024e  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005a  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
#include <avr/io.h>

void delay(int d)
{
	int i = 0; // counter variable
	TCCR0B = 1; //start TIMER0
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	25 bd       	out	0x25, r18	; 37
	TCNT0 = 0; // set TIMER0 counter to 0
  84:	16 bc       	out	0x26, r1	; 38
	
	while (i < d * const2ms / 2) // check if time elapsed
  86:	4d e7       	ldi	r20, 0x7D	; 125
  88:	9c 01       	movw	r18, r24
  8a:	42 9f       	mul	r20, r18
  8c:	c0 01       	movw	r24, r0
  8e:	43 9f       	mul	r20, r19
  90:	90 0d       	add	r25, r0
  92:	11 24       	eor	r1, r1
  94:	99 23       	and	r25, r25
  96:	0c f4       	brge	.+2      	; 0x9a <delay+0x1a>
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	9c 01       	movw	r18, r24
  9c:	35 95       	asr	r19
  9e:	27 95       	ror	r18

#include <avr/io.h>

void delay(int d)
{
	int i = 0; // counter variable
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	50 e0       	ldi	r21, 0x00	; 0
	TCCR0B = 1; //start TIMER0
	TCNT0 = 0; // set TIMER0 counter to 0
	
	while (i < d * const2ms / 2) // check if time elapsed
  a4:	08 c0       	rjmp	.+16     	; 0xb6 <delay+0x36>
	{
		if (TIFR0 && 1) // check if timer0 overflow
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	99 23       	and	r25, r25
  aa:	29 f0       	breq	.+10     	; 0xb6 <delay+0x36>
		{
			TIFR0 |= 7; // clear overflow bit
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	85 bb       	out	0x15, r24	; 21
			i++; // increment counter
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
{
	int i = 0; // counter variable
	TCCR0B = 1; //start TIMER0
	TCNT0 = 0; // set TIMER0 counter to 0
	
	while (i < d * const2ms / 2) // check if time elapsed
  b6:	42 17       	cp	r20, r18
  b8:	53 07       	cpc	r21, r19
  ba:	ac f3       	brlt	.-22     	; 0xa6 <delay+0x26>
		{
			TIFR0 |= 7; // clear overflow bit
			i++; // increment counter
		}
	}
}
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
	/* Replace with your application code */
	DDRB = 0b00000100; // set PORTB2 to output
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	84 b9       	out	0x04, r24	; 4
	while (1)
	{
		delay(250); // delay 250ms
		PORTB = 0b00000100; // Set PORTB2 to 1
  c2:	c4 e0       	ldi	r28, 0x04	; 4
{
	/* Replace with your application code */
	DDRB = 0b00000100; // set PORTB2 to output
	while (1)
	{
		delay(250); // delay 250ms
  c4:	8a ef       	ldi	r24, 0xFA	; 250
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 40 00 	call	0x80	; 0x80 <delay>
		PORTB = 0b00000100; // Set PORTB2 to 1
  cc:	c5 b9       	out	0x05, r28	; 5
		delay(250); // delay 250ms
  ce:	8a ef       	ldi	r24, 0xFA	; 250
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 40 00 	call	0x80	; 0x80 <delay>
		PORTB = 0; // Set PORTB2 to 0
  d6:	15 b8       	out	0x05, r1	; 5
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <main+0x6>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
