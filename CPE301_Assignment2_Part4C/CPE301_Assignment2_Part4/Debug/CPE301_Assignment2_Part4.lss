
CPE301_Assignment2_Part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000711  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000686  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000284  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000371  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 00 	call	0x108	; 0x108 <main>
  88:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
#include <avr/interrupt.h>

volatile int counter; // volatile global variable

ISR(TIMER0_OVF_vect) // interrupt function
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	counter--; // decrement the counter
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <delay>:

void delay(int d) // makes a delay of d ms
{
	int i = 0; // internal counter
	TCNT0 = 0; // set timer0 counter to 0
  be:	16 bc       	out	0x26, r1	; 38
	TCCR0B = 1; // start timer 0
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	25 bd       	out	0x25, r18	; 37
	while (i < d * const2ms / 2) // check if time elapsed
  c4:	2d e7       	ldi	r18, 0x7D	; 125
  c6:	ac 01       	movw	r20, r24
  c8:	24 9f       	mul	r18, r20
  ca:	c0 01       	movw	r24, r0
  cc:	25 9f       	mul	r18, r21
  ce:	90 0d       	add	r25, r0
  d0:	11 24       	eor	r1, r1
  d2:	99 23       	and	r25, r25
  d4:	0c f4       	brge	.+2      	; 0xd8 <delay+0x1a>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
	counter--; // decrement the counter
}

void delay(int d) // makes a delay of d ms
{
	int i = 0; // internal counter
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
	TCCR0B = 1; // start timer 0
	while (i < d * const2ms / 2) // check if time elapsed
	{
		if (counter == 0) // check if counter is 0
		{
			counter = 1; // set counter to 1
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	70 e0       	ldi	r23, 0x00	; 0
void delay(int d) // makes a delay of d ms
{
	int i = 0; // internal counter
	TCNT0 = 0; // set timer0 counter to 0
	TCCR0B = 1; // start timer 0
	while (i < d * const2ms / 2) // check if time elapsed
  e4:	0c c0       	rjmp	.+24     	; 0xfe <delay+0x40>
	{
		if (counter == 0) // check if counter is 0
  e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  ea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  ee:	23 2b       	or	r18, r19
  f0:	31 f4       	brne	.+12     	; 0xfe <delay+0x40>
		{
			counter = 1; // set counter to 1
  f2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
  f6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
			i++; // increment internal counter
  fa:	4f 5f       	subi	r20, 0xFF	; 255
  fc:	5f 4f       	sbci	r21, 0xFF	; 255
void delay(int d) // makes a delay of d ms
{
	int i = 0; // internal counter
	TCNT0 = 0; // set timer0 counter to 0
	TCCR0B = 1; // start timer 0
	while (i < d * const2ms / 2) // check if time elapsed
  fe:	48 17       	cp	r20, r24
 100:	59 07       	cpc	r21, r25
 102:	8c f3       	brlt	.-30     	; 0xe6 <delay+0x28>
		{
			counter = 1; // set counter to 1
			i++; // increment internal counter
		}
	}
	TCCR0B = 0; // stop timer0
 104:	15 bc       	out	0x25, r1	; 37
 106:	08 95       	ret

00000108 <main>:


int main(void)
{
	/* Replace with your application code */
	DDRB = 0b00000100; // set PORTB2 to output
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	84 b9       	out	0x04, r24	; 4
	TIMSK0 = (1 << TOIE0); // enable timer 0 interrupt
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	counter = 1; // set counter to 1
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	sei(); // enable interrupts
 11e:	78 94       	sei
	while (1)
	{
		PORTB = 0b00000100; // set PORTB2 to 1
 120:	c4 e0       	ldi	r28, 0x04	; 4
 122:	c5 b9       	out	0x05, r28	; 5
		delay(250); // wait 250ms
 124:	8a ef       	ldi	r24, 0xFA	; 250
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 5f 00 	call	0xbe	; 0xbe <delay>
		PORTB = 0; // set PORTB2 to 0
 12c:	15 b8       	out	0x05, r1	; 5
		delay(250); // wait 250ms
 12e:	8a ef       	ldi	r24, 0xFA	; 250
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 5f 00 	call	0xbe	; 0xbe <delay>
 136:	f5 cf       	rjmp	.-22     	; 0x122 <main+0x1a>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
